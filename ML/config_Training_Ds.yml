input: # files to use
    prompt: ../../../Analyses/pp5TeV/Ds_wML_mult/inputs/MC/ml/old/Prompt_Dspp5TeVNoOutlier_pT_1_50.parquet.gzip
    FD: ../../../Analyses/pp5TeV/Ds_wML_mult/inputs/MC/ml/old/FD_Dspp5TeVNoOutlier_pT_1_50.parquet.gzip
    data: ../../../Analyses/pp5TeV/Ds_wML_mult/inputs/data/ml/Data_Dspp5TeVNoOutlier_pT_1_50.parquet.gzip

output:
    leg_labels: ['Background', 'Prompt D$_s$', 'Feed-down D$_s$'] # legend labels
    out_labels: ['Bkg', 'Prompt', 'FD'] # output labels
    dir: '../../../Analyses/pp5TeV/Ds_wML_mult/ml_training' # output dir

pt_ranges: # ranges in pt to split the data in the ml training and testing
    min: [2] # list
    max: [4] # list

data_prep:
    filt_bkg_mass: inv_mass < 1.832 or inv_mass > 2.012 # pandas query to select bkg candidates
    dataset_opt: max_signal # change how the dataset is built, options available: 'equal', 'max_signal'
                            # 'equal' -> same number of prompt/FD/bkg (not using all the signal available)
                            # 'max_signal' -> try to use all the signal (prompt and FD) + add n_bkg = 2 * (n_prompt + n_FD)
    bkg_mult: [2.] # list of multipliers for (nPrompt + nFD) used to determine nCandBkg in the 'max_signal' option
    seed_split: 42 # seed used for train_test_split(...)
    test_fraction: 0.5 # fraction of data used for test set and efficiencies --> set to 1. if you want to apply the model to the full dataframes  
    
ml:
    raw_output: False # use raw_output (True) of probability (False) as output of the model
    roc_auc_average: 'macro' # 'macro' or 'weighted'
    roc_auc_approach: 'ovo'  # 'ovo' or 'ovr'
    training_columns: [cos_p_xy, d_len, norm_dl_xy, sig_vert, delta_mass_KK, cos_PiKPhi_3,
                       max_norm_d0d0exp, nsigComb_Pi_0, nsigComb_Pi_1, nsigComb_Pi_2, nsigComb_K_0, nsigComb_K_1, nsigComb_K_2] 
                       # list of training variables

    hyper_par: [{'max_depth':3, 'learning_rate':0.05, 'n_estimators':400, 'min_child_weight':5, 'colsample':0.9, 'n_jobs':1, 'tree_method':hist}]
               # list of dicts of hyperparameters (one for each pT bin)

    hyper_par_opt:
      do_hyp_opt: True # whether to do the parameter optimization
      njobs: 8 # number of parallel jobs used in hyper-parameter optimization, -1. to use all
      nfolds: 5 # number of folds used in cross validation
      initpoints: 5 # steps of random exploration you want to perform
      niter: 5 # steps for bayesian optimization
      bayes_opt_config: {'max_depth': !!python/tuple [2, 6], 
                        'learning_rate': !!python/tuple [0.02, 0.1]}
                        # configuration dictionary for optimize_params_bayes()

    saved_models: [../../../Analyses/pp5TeV/Ds_wML_mult/ml_training/pt2_4/ModelHandler_pT_2_4.pickle] 
                   # list of saved ModelHandler (path+file), compatible with the pt bins

plots:
    plotting_columns: [inv_mass, pt_cand, cos_p_xy, d_len, norm_dl_xy, sig_vert, delta_mass_KK, cos_PiKPhi_3,
                       max_norm_d0d0exp, nsigComb_Pi_0, nsigComb_Pi_1, nsigComb_Pi_2, nsigComb_K_0, nsigComb_K_1, nsigComb_K_2] 
                       # list of variables to plot
    train_test_log: False # use log scale for plots of train and test distributions

df_column_to_save_opt: 
    df_column_to_save_list: ['inv_mass', 'pt_cand'] # list of variables saved in the dataframes with the applied models
